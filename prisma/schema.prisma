generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  resetToken    String?
  resetTokenExp DateTime?
  accounts      Account[]
  sessions      Session[]
  playlists     Playlist[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Playlist {
  id        String   @id @default(cuid())
  name      String
  userId    String
  isPublic  Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  songs     PlaylistSong[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Song {
  videoId    String         @id
  title      String
  artist     String
  thumbnail  String
  playlists  PlaylistSong[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model PlaylistSong {
  id         String   @id @default(cuid())
  playlistId String
  songId     String
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  song       Song     @relation(fields: [songId], references: [videoId], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([playlistId, songId])
}
